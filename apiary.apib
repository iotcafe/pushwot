FORMAT: 1A
HOST: https://vo.mjyun.com/

# Push WoT API

PUSH WebAPI for IoT

About HTTP status code, please see RFC 2616(RFC 2518/RFC 2817/RFC 2295/RFC 2774/RFC 4918).

# Group API for devices

## Devices [/dev/devices]

### Create Device [POST]

Create device by product ID, and get device ID.

#### Errors

| HTTP Status | Result Code | Message                                 |
|-------------|:-----------:|----------------------------------------:|
| 400         | 10001       | Invalid parameters                      |
| 400         | 10002       | Invalid product ID                      |
| 400         | 10005       | Invalid request method                  |
| 400         | 20001       | Error gen dvid                          |
| 400         | 20002       | Error of DB                             |


+ Request (application/json)

    + Body

            {
                "ProductId": "WotP0123456789",
                "DeviceMac": "18:FE:34:01:02:03",
                "DevicePassword": "SomeRandomPasswordForDevice",
                "HardwareVersion":"1.0.0.0"
            }   


+ Response 200 (application/json)

    + Body

            {
                "Result": 0,
                "DeviceId": "WotD0123456789"
            }  
            
+ Response 400 (application/json)

    + Body
    
            {
                "Result":10001,
                "Message":"Invalid Parameters"
            }
            
### Delete Device [DELETE]

Delete device by device ID and device password.

#### Errors

| HTTP Status | Result Code | Message                                 |
|-------------|:-----------:|----------------------------------------:|
| 400         | 10001       | Invalid parameters                      |
| 400         | 10003       | Invalid device ID                       |
| 400         | 10004       | Invalid device password                 |
| 400         | 20002       | Error of DB                             |


+ Request (application/json)

    + Body

            {
                "DeviceId": "WotD0123456789",
                "DevicePassword": "SomeRandomPasswordForDevice"
            } 


+ Response 200 (application/json)

    + Body

            {
                "Result": 0
            }  

+ Response 400 (application/json)

    + Body

            {
                "Result":10002,
                "Message":"Invalid DeviceId"
            }
            
## Device Distribution [/dev/distribution]

### Device Distribution [POST]

Get M2M domain from cloud.

#### Errors

| HTTP Status | Result Code | Message                                 |
|-------------|:-----------:|----------------------------------------:|
| 400         | 10001       | Invalid parameters                      |
| 400         | 10003       | Invalid device ID                       |
| 400         | 10005       | Invalid request method                  |
| 400         | 20002       | Error of DB                             |

+ Request (application/json)

    + Body

            {
                "DeviceId": "WotD0123456789"
            } 
            
+ Response 200 (application/json)

    + Body

            {
                "M2mHost":"s123456.m2m.mjyun.com",
                "M2mPort":"3128"
            }
            
+ Response 400 (application/json)

    + Body

            {
                "Result":10002,
                "Message":"Invalid DeviceId"
            }
            
## Device OTA [/dev/ota/v1.0]

### Device OTA [POST]

Device get latest firmware from cloud.

#### Errors

| HTTP Status | Result Code | Message                                 |
|-------------|:-----------:|----------------------------------------:|
| 400         | 10001       | Invalid parameters                      |
| 400         | 10003       | Invalid device ID                       |
| 400         | 10005       | Invalid request method                  |
| 400         | 10007       | Invalid firmware ID                     |
| 400         | 20002       | Error of DB                             |

+ Request (application/json)

    + Body

            {
                "DeviceId": "WotD0123456789",
                "DevicePassword": "SomeRandomPasswordForDevice",
                "FirmwareId":"WotF0123456789",
                "FirmwareVersion":"1.0.0.0"
            } 
            
+ Response 200 (application/json)

    + Body

            {
                "NeedUpdate":"1",
                "FirmwareVersion":"1.0.0.1",
                "FirmwareUrl":"http://download.wot.mjyun.com/xxxxxxx.bin",
                "FirmwareMD5":"8c34d611f057adab20af1dde636be4bb"
            }

+ Response 200 (application/json)
    + Body 
            {
                "NeedUpdate":"0",
            }
            
+ Response 400 (application/json)

    + Body

            {
                "Result":10002,
                "Message":"Invalid DeviceId"
            }

# Group API for users

## Verification Code [/usr/code]

### Phone Verification Code [Get]

Get the verification code, use for register, change password or other Verification operation.

#### Errors

| HTTP Status | Result Code | Message                                 |
|-------------|:-----------:|----------------------------------------:|
| 400         | 10001       | Invalid parameters                      |
| 400         | 10008       | Invalid Phone Number                    |
| 400         | 10009       | Too frequent to gen code in 60s         |
| 400         | 20003       | Error of Redis                          |
| 400         | 20004       | Error to Notice User                    |


+ Request (application/json)

    + Body

            {
                "PhoneNumber": "13912344321"
            }
    
+ Response 200 (application/json)

    + Body 
        
            {
                "Result": 0,
                "Message": "Ok"
            }

+ Response 400 (application/json)

    + Body
    
            {
                "Result": 10001,
                "Message": "Invalid Parameters"
            }

## Users [/usr/users]

### Register User [POST]

Register user by phonenum/password/code. We also use to change the password, to avoid this: 
 One user's phone has been registered, but he/she forgot. 
 He/she execute the register process, but get "Phone has registeredi" at the last step.
 This would be Unfriendly. 

First step is call other interface to get the verification code.

#### Errors

| HTTP Status | Result Code | Message                                 |
|-------------|:-----------:|----------------------------------------:|
| 400         | 10001       | Invalid parameters                      |
| 400         | 10008       | Invalid Phone Number                    |
| 400         | 10010       | Invalid Verifaction Code                |
| 400         | 10011       | Invalid User Password                   |
| 400         | 20003       | Error of Redis                          |
| 400         | 20004       | Error to Db                             |


+ Request (application/json)

    + Body

            {
                "PhoneNumber": "13912344321",
                "Code": "778623",
                "Password": "UserPasswd"
            }
    
+ Response 200 (application/json)

    + Body 
        
            {
                "Result": 0,
                "Message": "Ok"
            }

+ Response 400 (application/json)

    + Body
    
            {
                "Result": 10001,
                "Message": "Invalid Parameters"
            }
              
# Group Rules

## Naming Rules

### Rules for naming ProductId and DeviceId

| Name       | explain             | Length | example        | limit                 |
|------------|:-------------------:|-------:|---------------:|----------------------:|
| ProductId  | "WotP"+ Digit(10)   | 14     | WotP0123456789 | max digit:2147483647  | 
| DeviceId   | "WotD"+ Digit(10)   | 14     | WotD0123456789 | max digit:4294967295  |
| FirmwareId | "WotF"+ Digit(10)   | 14     | WotF0123456789 | max digit:2147483647  |

When there are more than 4294967295 devices, we can use other Prefix for DeviceId   

### Rules for naming JSON Data and any other objects

We using Camel-Case for JSON object naming.

| Type        | Naming rule         | example                 |
|-------------|:-------------------:|------------------------:|
| JSON Data   | UpperCamelCase      | ProductId               | 
| Class       | UpperCamelCase      | TestClass               | 
| Variable    | lowerCamelCase      | testVariable            | 
| Method      | lowerCamelCase      | testMethod()            | 
| Function    | lowerCamelCase      | testFunction()          |

Special rules

ID, MAC, UDP, TCP, etc., applied CamelCase, convert to Id, Mac, Udp, Tcp and so on.
        
## Request Rules

Allow: 0,GET 1,HEAD 2,PUT 3,DELETE 4,POST 5,OPTIONS

| Request     | Operation      | Note                    |
|-------------|:--------------:|------------------------:|
| GET         | Read           | Read                    | 
| HEAD        | Read Header    | Read header, probe      | 
| PUT         | Update/Write   | Update                  | 
| DELETE      | Delete         | Delete                  | 
| POST        | Create/Write   | Create or update        |
| OPTIONS     | Read Options   | Read options, probe     |

## Result Code

| HTTP Status | Result Code | Message                                 |
|-------------|:-----------:|----------------------------------------:|
| 200         | 0           | OK                                      |
| 400         | 10001       | Invalid parameters                      |
| 400         | 10002       | Invalid product ID                      |
| 400         | 10003       | Invalid device ID                       |
| 400         | 10004       | Invalid device password                 |
| 400         | 10005       | Invalid request method                  |
| 400         | 10006       | Missing request parameters              |
| 400         | 10007       | Invalid firmware ID                     |
| 400         | 10008       | Invalid Phone Number                    |
| 400         | 10009       | Too frequent to gen code in 60s         |
| 400         | 10010       | Invalid Verifaction Code                |
| 400         | 10011       | Invalid User Password                   |
| 400         | 20001       | Error gen dvid                          |
| 400         | 20002       | Error of DB                             |
| 400         | 20003       | Error of Redis                          |
| 400         | 20004       | Error to Notice User                    |
